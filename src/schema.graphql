type Query {
    users(filter: String): [User]!
    info_user(user: String!): User
    chats(first: Int): [Chat]!
    info_chat(chat: String!): Chat
    messages(chat: String!, first: Int, orderBy: MessageOrderByInput = created_at_DESC): [Message]!
    info_message(message: String!): [Viewed]!
}

type Mutation {
    login(username: String!, password: String!): AuthPayLoad
    signup(username: String!, password: String!, email: String!): AuthPayLoad
    send_message(chat: String!, message: String!): Message
    view_message(chat: String!): [Message]!
    create_private_chat(user: String!): Chat!
    create_group_chat(chat_name: String!, users: [String!]!): Chat
    add_users_group_chat(chat: String!, users: [String!]!): Chat
    delete_users_group_chat(chat: String!, users: [String!]!): Chat
    left_group_chat(chat: String!): Chat
    block_user(user: String!): User
    unblock_user(user: String!): User
    change_class_group_chat(chat: String!, user: String!, class: Class_User!): Member
}

type Subscription {
    newMessage(token: String!): Message
}

type AuthPayLoad {
    token: String!
    user: User
}

type User {
    id: ID!
    username: String!
    email: String!
    created_at: DateTime!
    chats: [Member]!
    blocked: [User]!
}

type Chat {
    id: ID!
    users: [Member]!
    chat_name: String
    messages(onlyLastMessage: Boolean = false): [Message]!
    is_private: Boolean!
    created_at: DateTime!
}

type Member {
    id: ID!
    chat: Chat!
    user: User!
    class: Class_User!
}

type Message {
    id: ID!
    chat_id: Chat!
    chat_name: String!
    user: User!
    message: String!
    viewed: [Viewed]!
    created_at: DateTime!
}

type Viewed {
    id: ID!
    user: User!
    viewed_date: DateTime!
    message: Message!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  created_at_ASC
  created_at_DESC
}

enum Class_User {
    ADMIN
    MODERATOR
    USER
}

scalar ID
scalar DateTime