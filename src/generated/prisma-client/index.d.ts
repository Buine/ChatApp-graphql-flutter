// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  chat: (where?: ChatWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  viewed: (where?: ViewedWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chat: (where: ChatWhereUniqueInput) => ChatNullablePromise;
  chats: (args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Chat>;
  chatsConnection: (args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChatConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  viewed: (where: ViewedWhereUniqueInput) => ViewedNullablePromise;
  vieweds: (args?: {
    where?: ViewedWhereInput;
    orderBy?: ViewedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Viewed>;
  viewedsConnection: (args?: {
    where?: ViewedWhereInput;
    orderBy?: ViewedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ViewedConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChat: (data: ChatCreateInput) => ChatPromise;
  updateChat: (args: {
    data: ChatUpdateInput;
    where: ChatWhereUniqueInput;
  }) => ChatPromise;
  updateManyChats: (args: {
    data: ChatUpdateManyMutationInput;
    where?: ChatWhereInput;
  }) => BatchPayloadPromise;
  upsertChat: (args: {
    where: ChatWhereUniqueInput;
    create: ChatCreateInput;
    update: ChatUpdateInput;
  }) => ChatPromise;
  deleteChat: (where: ChatWhereUniqueInput) => ChatPromise;
  deleteManyChats: (where?: ChatWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createViewed: (data: ViewedCreateInput) => ViewedPromise;
  updateViewed: (args: {
    data: ViewedUpdateInput;
    where: ViewedWhereUniqueInput;
  }) => ViewedPromise;
  upsertViewed: (args: {
    where: ViewedWhereUniqueInput;
    create: ViewedCreateInput;
    update: ViewedUpdateInput;
  }) => ViewedPromise;
  deleteViewed: (where: ViewedWhereUniqueInput) => ViewedPromise;
  deleteManyVieweds: (where?: ViewedWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chat: (
    where?: ChatSubscriptionWhereInput
  ) => ChatSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  viewed: (
    where?: ViewedSubscriptionWhereInput
  ) => ViewedSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "message_ASC"
  | "message_DESC"
  | "created_at_ASC"
  | "created_at_DESC";

export type ChatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "chat_name_ASC"
  | "chat_name_DESC"
  | "is_private_ASC"
  | "is_private_DESC"
  | "created_at_ASC"
  | "created_at_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC"
  | "created_at_ASC"
  | "created_at_DESC";

export type ViewedOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "viewed_date_ASC"
  | "viewed_date_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ChatUpsertWithWhereUniqueWithoutUsersInput {
  where: ChatWhereUniqueInput;
  update: ChatUpdateWithoutUsersDataInput;
  create: ChatCreateWithoutUsersInput;
}

export type ChatWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateManyWithoutChatsInput {
  create?: Maybe<UserCreateWithoutChatsInput[] | UserCreateWithoutChatsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  chat_id: ChatCreateOneWithoutMessagesInput;
  user: UserCreateOneInput;
  message: String;
  viewed?: Maybe<ViewedCreateManyWithoutMessageInput>;
}

export interface UserCreateWithoutChatsInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email: String;
  blocked?: Maybe<UserCreateManyInput>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface ChatUpdateInput {
  chat_name?: Maybe<String>;
  is_private?: Maybe<Boolean>;
  messages?: Maybe<MessageUpdateManyWithoutChat_idInput>;
  users?: Maybe<UserUpdateManyWithoutChatsInput>;
}

export interface ChatWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  chat_name?: Maybe<String>;
  chat_name_not?: Maybe<String>;
  chat_name_in?: Maybe<String[] | String>;
  chat_name_not_in?: Maybe<String[] | String>;
  chat_name_lt?: Maybe<String>;
  chat_name_lte?: Maybe<String>;
  chat_name_gt?: Maybe<String>;
  chat_name_gte?: Maybe<String>;
  chat_name_contains?: Maybe<String>;
  chat_name_not_contains?: Maybe<String>;
  chat_name_starts_with?: Maybe<String>;
  chat_name_not_starts_with?: Maybe<String>;
  chat_name_ends_with?: Maybe<String>;
  chat_name_not_ends_with?: Maybe<String>;
  is_private?: Maybe<Boolean>;
  is_private_not?: Maybe<Boolean>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  AND?: Maybe<ChatWhereInput[] | ChatWhereInput>;
  OR?: Maybe<ChatWhereInput[] | ChatWhereInput>;
  NOT?: Maybe<ChatWhereInput[] | ChatWhereInput>;
}

export interface MessageUpdateManyWithoutChat_idInput {
  create?: Maybe<
    MessageCreateWithoutChat_idInput[] | MessageCreateWithoutChat_idInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutChat_idInput[]
    | MessageUpdateWithWhereUniqueWithoutChat_idInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutChat_idInput[]
    | MessageUpsertWithWhereUniqueWithoutChat_idInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface MessageUpdateWithWhereUniqueWithoutChat_idInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutChat_idDataInput;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  chat_id?: Maybe<ChatWhereInput>;
  user?: Maybe<UserWhereInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  viewed_every?: Maybe<ViewedWhereInput>;
  viewed_some?: Maybe<ViewedWhereInput>;
  viewed_none?: Maybe<ViewedWhereInput>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface MessageUpdateWithoutChat_idDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  message?: Maybe<String>;
  viewed?: Maybe<ViewedUpdateManyWithoutMessageInput>;
}

export interface MessageUpsertWithoutViewedInput {
  update: MessageUpdateWithoutViewedDataInput;
  create: MessageCreateWithoutViewedInput;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface MessageUpdateOneRequiredWithoutViewedInput {
  create?: Maybe<MessageCreateWithoutViewedInput>;
  update?: Maybe<MessageUpdateWithoutViewedDataInput>;
  upsert?: Maybe<MessageUpsertWithoutViewedInput>;
  connect?: Maybe<MessageWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  chats?: Maybe<ChatUpdateManyWithoutUsersInput>;
  blocked?: Maybe<UserUpdateManyInput>;
}

export interface MessageCreateWithoutViewedInput {
  id?: Maybe<ID_Input>;
  chat_id: ChatCreateOneWithoutMessagesInput;
  user: UserCreateOneInput;
  message: String;
}

export interface ChatUpdateManyWithoutUsersInput {
  create?: Maybe<ChatCreateWithoutUsersInput[] | ChatCreateWithoutUsersInput>;
  delete?: Maybe<ChatWhereUniqueInput[] | ChatWhereUniqueInput>;
  connect?: Maybe<ChatWhereUniqueInput[] | ChatWhereUniqueInput>;
  set?: Maybe<ChatWhereUniqueInput[] | ChatWhereUniqueInput>;
  disconnect?: Maybe<ChatWhereUniqueInput[] | ChatWhereUniqueInput>;
  update?: Maybe<
    | ChatUpdateWithWhereUniqueWithoutUsersInput[]
    | ChatUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | ChatUpsertWithWhereUniqueWithoutUsersInput[]
    | ChatUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<ChatScalarWhereInput[] | ChatScalarWhereInput>;
  updateMany?: Maybe<
    ChatUpdateManyWithWhereNestedInput[] | ChatUpdateManyWithWhereNestedInput
  >;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChatUpdateWithWhereUniqueWithoutUsersInput {
  where: ChatWhereUniqueInput;
  data: ChatUpdateWithoutUsersDataInput;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
}

export interface ChatUpdateWithoutUsersDataInput {
  chat_name?: Maybe<String>;
  is_private?: Maybe<Boolean>;
  messages?: Maybe<MessageUpdateManyWithoutChat_idInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface ChatCreateOneWithoutMessagesInput {
  create?: Maybe<ChatCreateWithoutMessagesInput>;
  connect?: Maybe<ChatWhereUniqueInput>;
}

export interface ChatUpsertWithoutMessagesInput {
  update: ChatUpdateWithoutMessagesDataInput;
  create: ChatCreateWithoutMessagesInput;
}

export interface ChatScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  chat_name?: Maybe<String>;
  chat_name_not?: Maybe<String>;
  chat_name_in?: Maybe<String[] | String>;
  chat_name_not_in?: Maybe<String[] | String>;
  chat_name_lt?: Maybe<String>;
  chat_name_lte?: Maybe<String>;
  chat_name_gt?: Maybe<String>;
  chat_name_gte?: Maybe<String>;
  chat_name_contains?: Maybe<String>;
  chat_name_not_contains?: Maybe<String>;
  chat_name_starts_with?: Maybe<String>;
  chat_name_not_starts_with?: Maybe<String>;
  chat_name_ends_with?: Maybe<String>;
  chat_name_not_ends_with?: Maybe<String>;
  is_private?: Maybe<Boolean>;
  is_private_not?: Maybe<Boolean>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ChatScalarWhereInput[] | ChatScalarWhereInput>;
  OR?: Maybe<ChatScalarWhereInput[] | ChatScalarWhereInput>;
  NOT?: Maybe<ChatScalarWhereInput[] | ChatScalarWhereInput>;
}

export type ViewedWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChatUpdateManyWithWhereNestedInput {
  where: ChatScalarWhereInput;
  data: ChatUpdateManyDataInput;
}

export interface MessageUpdateInput {
  chat_id?: Maybe<ChatUpdateOneRequiredWithoutMessagesInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  message?: Maybe<String>;
  viewed?: Maybe<ViewedUpdateManyWithoutMessageInput>;
}

export interface ChatUpdateManyDataInput {
  chat_name?: Maybe<String>;
  is_private?: Maybe<Boolean>;
}

export interface MessageCreateManyWithoutChat_idInput {
  create?: Maybe<
    MessageCreateWithoutChat_idInput[] | MessageCreateWithoutChat_idInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  chats_every?: Maybe<ChatWhereInput>;
  chats_some?: Maybe<ChatWhereInput>;
  chats_none?: Maybe<ChatWhereInput>;
  blocked_every?: Maybe<UserWhereInput>;
  blocked_some?: Maybe<UserWhereInput>;
  blocked_none?: Maybe<UserWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface ChatCreateManyWithoutUsersInput {
  create?: Maybe<ChatCreateWithoutUsersInput[] | ChatCreateWithoutUsersInput>;
  connect?: Maybe<ChatWhereUniqueInput[] | ChatWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface ViewedCreateWithoutMessageInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface ViewedSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ViewedWhereInput>;
  AND?: Maybe<ViewedSubscriptionWhereInput[] | ViewedSubscriptionWhereInput>;
  OR?: Maybe<ViewedSubscriptionWhereInput[] | ViewedSubscriptionWhereInput>;
  NOT?: Maybe<ViewedSubscriptionWhereInput[] | ViewedSubscriptionWhereInput>;
}

export interface UserUpdateManyDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
}

export interface ChatSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChatWhereInput>;
  AND?: Maybe<ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput>;
  OR?: Maybe<ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput>;
  NOT?: Maybe<ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ViewedUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  message?: Maybe<MessageUpdateOneRequiredWithoutViewedInput>;
}

export interface ViewedUpdateManyWithoutMessageInput {
  create?: Maybe<
    ViewedCreateWithoutMessageInput[] | ViewedCreateWithoutMessageInput
  >;
  delete?: Maybe<ViewedWhereUniqueInput[] | ViewedWhereUniqueInput>;
  connect?: Maybe<ViewedWhereUniqueInput[] | ViewedWhereUniqueInput>;
  set?: Maybe<ViewedWhereUniqueInput[] | ViewedWhereUniqueInput>;
  disconnect?: Maybe<ViewedWhereUniqueInput[] | ViewedWhereUniqueInput>;
  update?: Maybe<
    | ViewedUpdateWithWhereUniqueWithoutMessageInput[]
    | ViewedUpdateWithWhereUniqueWithoutMessageInput
  >;
  upsert?: Maybe<
    | ViewedUpsertWithWhereUniqueWithoutMessageInput[]
    | ViewedUpsertWithWhereUniqueWithoutMessageInput
  >;
  deleteMany?: Maybe<ViewedScalarWhereInput[] | ViewedScalarWhereInput>;
}

export interface ViewedCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  message: MessageCreateOneWithoutViewedInput;
}

export interface ViewedUpdateWithWhereUniqueWithoutMessageInput {
  where: ViewedWhereUniqueInput;
  data: ViewedUpdateWithoutMessageDataInput;
}

export interface MessageUpdateManyMutationInput {
  message?: Maybe<String>;
}

export interface ViewedUpdateWithoutMessageDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ChatUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<ChatCreateWithoutMessagesInput>;
  update?: Maybe<ChatUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<ChatUpsertWithoutMessagesInput>;
  connect?: Maybe<ChatWhereUniqueInput>;
}

export interface ViewedUpsertWithWhereUniqueWithoutMessageInput {
  where: ViewedWhereUniqueInput;
  update: ViewedUpdateWithoutMessageDataInput;
  create: ViewedCreateWithoutMessageInput;
}

export interface ChatCreateInput {
  id?: Maybe<ID_Input>;
  chat_name?: Maybe<String>;
  is_private?: Maybe<Boolean>;
  messages?: Maybe<MessageCreateManyWithoutChat_idInput>;
  users?: Maybe<UserCreateManyWithoutChatsInput>;
}

export interface ViewedScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  viewed_date?: Maybe<DateTimeInput>;
  viewed_date_not?: Maybe<DateTimeInput>;
  viewed_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  viewed_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  viewed_date_lt?: Maybe<DateTimeInput>;
  viewed_date_lte?: Maybe<DateTimeInput>;
  viewed_date_gt?: Maybe<DateTimeInput>;
  viewed_date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ViewedScalarWhereInput[] | ViewedScalarWhereInput>;
  OR?: Maybe<ViewedScalarWhereInput[] | ViewedScalarWhereInput>;
  NOT?: Maybe<ViewedScalarWhereInput[] | ViewedScalarWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  email: String;
  chats?: Maybe<ChatCreateManyWithoutUsersInput>;
  blocked?: Maybe<UserCreateManyInput>;
}

export interface MessageUpsertWithWhereUniqueWithoutChat_idInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutChat_idDataInput;
  create: MessageCreateWithoutChat_idInput;
}

export interface ViewedCreateManyWithoutMessageInput {
  create?: Maybe<
    ViewedCreateWithoutMessageInput[] | ViewedCreateWithoutMessageInput
  >;
  connect?: Maybe<ViewedWhereUniqueInput[] | ViewedWhereUniqueInput>;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageCreateOneWithoutViewedInput {
  create?: Maybe<MessageCreateWithoutViewedInput>;
  connect?: Maybe<MessageWhereUniqueInput>;
}

export interface MessageUpdateManyDataInput {
  message?: Maybe<String>;
}

export interface ChatUpdateWithoutMessagesDataInput {
  chat_name?: Maybe<String>;
  is_private?: Maybe<Boolean>;
  users?: Maybe<UserUpdateManyWithoutChatsInput>;
}

export interface UserUpdateManyWithoutChatsInput {
  create?: Maybe<UserCreateWithoutChatsInput[] | UserCreateWithoutChatsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutChatsInput[]
    | UserUpdateWithWhereUniqueWithoutChatsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutChatsInput[]
    | UserUpsertWithWhereUniqueWithoutChatsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface MessageCreateWithoutChat_idInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  message: String;
  viewed?: Maybe<ViewedCreateManyWithoutMessageInput>;
}

export interface ChatUpdateManyMutationInput {
  chat_name?: Maybe<String>;
  is_private?: Maybe<Boolean>;
}

export interface UserUpsertWithWhereUniqueWithoutChatsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutChatsDataInput;
  create: UserCreateWithoutChatsInput;
}

export interface UserUpdateWithoutChatsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  blocked?: Maybe<UserUpdateManyInput>;
}

export interface UserUpdateWithWhereUniqueWithoutChatsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutChatsDataInput;
}

export interface ChatCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  chat_name?: Maybe<String>;
  is_private?: Maybe<Boolean>;
  messages?: Maybe<MessageCreateManyWithoutChat_idInput>;
}

export interface ChatCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  chat_name?: Maybe<String>;
  is_private?: Maybe<Boolean>;
  users?: Maybe<UserCreateManyWithoutChatsInput>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  chats?: Maybe<ChatUpdateManyWithoutUsersInput>;
  blocked?: Maybe<UserUpdateManyInput>;
}

export interface MessageUpdateWithoutViewedDataInput {
  chat_id?: Maybe<ChatUpdateOneRequiredWithoutMessagesInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  message?: Maybe<String>;
}

export interface ViewedWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  viewed_date?: Maybe<DateTimeInput>;
  viewed_date_not?: Maybe<DateTimeInput>;
  viewed_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  viewed_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  viewed_date_lt?: Maybe<DateTimeInput>;
  viewed_date_lte?: Maybe<DateTimeInput>;
  viewed_date_gt?: Maybe<DateTimeInput>;
  viewed_date_gte?: Maybe<DateTimeInput>;
  message?: Maybe<MessageWhereInput>;
  AND?: Maybe<ViewedWhereInput[] | ViewedWhereInput>;
  OR?: Maybe<ViewedWhereInput[] | ViewedWhereInput>;
  NOT?: Maybe<ViewedWhereInput[] | ViewedWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ViewedPreviousValues {
  id: ID_Output;
  viewed_date: DateTimeOutput;
}

export interface ViewedPreviousValuesPromise
  extends Promise<ViewedPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  viewed_date: () => Promise<DateTimeOutput>;
}

export interface ViewedPreviousValuesSubscription
  extends Promise<AsyncIterator<ViewedPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  viewed_date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ChatEdge {
  node: Chat;
  cursor: String;
}

export interface ChatEdgePromise extends Promise<ChatEdge>, Fragmentable {
  node: <T = ChatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChatEdgeSubscription
  extends Promise<AsyncIterator<ChatEdge>>,
    Fragmentable {
  node: <T = ChatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Message {
  id: ID_Output;
  message: String;
  created_at?: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  chat_id: <T = ChatPromise>() => T;
  user: <T = UserPromise>() => T;
  message: () => Promise<String>;
  viewed: <T = FragmentableArray<Viewed>>(args?: {
    where?: ViewedWhereInput;
    orderBy?: ViewedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created_at: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chat_id: <T = ChatSubscription>() => T;
  user: <T = UserSubscription>() => T;
  message: () => Promise<AsyncIterator<String>>;
  viewed: <T = Promise<AsyncIterator<ViewedSubscription>>>(args?: {
    where?: ViewedWhereInput;
    orderBy?: ViewedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  chat_id: <T = ChatPromise>() => T;
  user: <T = UserPromise>() => T;
  message: () => Promise<String>;
  viewed: <T = FragmentableArray<Viewed>>(args?: {
    where?: ViewedWhereInput;
    orderBy?: ViewedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created_at: () => Promise<DateTimeOutput>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChatConnection {
  pageInfo: PageInfo;
  edges: ChatEdge[];
}

export interface ChatConnectionPromise
  extends Promise<ChatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChatEdge>>() => T;
  aggregate: <T = AggregateChatPromise>() => T;
}

export interface ChatConnectionSubscription
  extends Promise<AsyncIterator<ChatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChatSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateViewed {
  count: Int;
}

export interface AggregateViewedPromise
  extends Promise<AggregateViewed>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateViewedSubscription
  extends Promise<AsyncIterator<AggregateViewed>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Viewed {
  id: ID_Output;
  viewed_date: DateTimeOutput;
}

export interface ViewedPromise extends Promise<Viewed>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  viewed_date: () => Promise<DateTimeOutput>;
  message: <T = MessagePromise>() => T;
}

export interface ViewedSubscription
  extends Promise<AsyncIterator<Viewed>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  viewed_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: <T = MessageSubscription>() => T;
}

export interface ViewedNullablePromise
  extends Promise<Viewed | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  viewed_date: () => Promise<DateTimeOutput>;
  message: <T = MessagePromise>() => T;
}

export interface ViewedConnection {
  pageInfo: PageInfo;
  edges: ViewedEdge[];
}

export interface ViewedConnectionPromise
  extends Promise<ViewedConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ViewedEdge>>() => T;
  aggregate: <T = AggregateViewedPromise>() => T;
}

export interface ViewedConnectionSubscription
  extends Promise<AsyncIterator<ViewedConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ViewedEdgeSubscription>>>() => T;
  aggregate: <T = AggregateViewedSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  email: String;
  created_at: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  created_at: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chat {
  id: ID_Output;
  chat_name?: String;
  is_private?: Boolean;
  created_at: DateTimeOutput;
}

export interface ChatPromise extends Promise<Chat>, Fragmentable {
  id: () => Promise<ID_Output>;
  chat_name: () => Promise<String>;
  is_private: () => Promise<Boolean>;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created_at: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChatSubscription
  extends Promise<AsyncIterator<Chat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chat_name: () => Promise<AsyncIterator<String>>;
  is_private: () => Promise<AsyncIterator<Boolean>>;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChatNullablePromise
  extends Promise<Chat | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  chat_name: () => Promise<String>;
  is_private: () => Promise<Boolean>;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created_at: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface ChatSubscriptionPayload {
  mutation: MutationType;
  node: Chat;
  updatedFields: String[];
  previousValues: ChatPreviousValues;
}

export interface ChatSubscriptionPayloadPromise
  extends Promise<ChatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChatPreviousValuesPromise>() => T;
}

export interface ChatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChatPreviousValuesSubscription>() => T;
}

export interface ViewedSubscriptionPayload {
  mutation: MutationType;
  node: Viewed;
  updatedFields: String[];
  previousValues: ViewedPreviousValues;
}

export interface ViewedSubscriptionPayloadPromise
  extends Promise<ViewedSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ViewedPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ViewedPreviousValuesPromise>() => T;
}

export interface ViewedSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ViewedSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ViewedSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ViewedPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessagePreviousValues {
  id: ID_Output;
  message: String;
  created_at?: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  message: () => Promise<String>;
  created_at: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  message: () => Promise<AsyncIterator<String>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
  email: String;
  created_at: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  created_at: () => Promise<DateTimeOutput>;
  chats: <T = FragmentableArray<Chat>>(args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blocked: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  chats: <T = Promise<AsyncIterator<ChatSubscription>>>(args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blocked: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  created_at: () => Promise<DateTimeOutput>;
  chats: <T = FragmentableArray<Chat>>(args?: {
    where?: ChatWhereInput;
    orderBy?: ChatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blocked: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChatPreviousValues {
  id: ID_Output;
  chat_name?: String;
  is_private?: Boolean;
  created_at: DateTimeOutput;
}

export interface ChatPreviousValuesPromise
  extends Promise<ChatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  chat_name: () => Promise<String>;
  is_private: () => Promise<Boolean>;
  created_at: () => Promise<DateTimeOutput>;
}

export interface ChatPreviousValuesSubscription
  extends Promise<AsyncIterator<ChatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chat_name: () => Promise<AsyncIterator<String>>;
  is_private: () => Promise<AsyncIterator<Boolean>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ViewedEdge {
  node: Viewed;
  cursor: String;
}

export interface ViewedEdgePromise extends Promise<ViewedEdge>, Fragmentable {
  node: <T = ViewedPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ViewedEdgeSubscription
  extends Promise<AsyncIterator<ViewedEdge>>,
    Fragmentable {
  node: <T = ViewedSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChat {
  count: Int;
}

export interface AggregateChatPromise
  extends Promise<AggregateChat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChatSubscription
  extends Promise<AsyncIterator<AggregateChat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Chat",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Viewed",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
