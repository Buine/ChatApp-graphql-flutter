module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateChat {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateViewed {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Chat {
  id: ID!
  chat_name: String
  is_private: Boolean
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type ChatConnection {
  pageInfo: PageInfo!
  edges: [ChatEdge]!
  aggregate: AggregateChat!
}

input ChatCreateInput {
  id: ID
  chat_name: String
  is_private: Boolean
  messages: MessageCreateManyWithoutChat_idInput
  users: UserCreateManyWithoutChatsInput
}

input ChatCreateManyWithoutUsersInput {
  create: [ChatCreateWithoutUsersInput!]
  connect: [ChatWhereUniqueInput!]
}

input ChatCreateOneWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput
  connect: ChatWhereUniqueInput
}

input ChatCreateWithoutMessagesInput {
  id: ID
  chat_name: String
  is_private: Boolean
  users: UserCreateManyWithoutChatsInput
}

input ChatCreateWithoutUsersInput {
  id: ID
  chat_name: String
  is_private: Boolean
  messages: MessageCreateManyWithoutChat_idInput
}

type ChatEdge {
  node: Chat!
  cursor: String!
}

enum ChatOrderByInput {
  id_ASC
  id_DESC
  chat_name_ASC
  chat_name_DESC
  is_private_ASC
  is_private_DESC
}

type ChatPreviousValues {
  id: ID!
  chat_name: String
  is_private: Boolean
}

input ChatScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  chat_name: String
  chat_name_not: String
  chat_name_in: [String!]
  chat_name_not_in: [String!]
  chat_name_lt: String
  chat_name_lte: String
  chat_name_gt: String
  chat_name_gte: String
  chat_name_contains: String
  chat_name_not_contains: String
  chat_name_starts_with: String
  chat_name_not_starts_with: String
  chat_name_ends_with: String
  chat_name_not_ends_with: String
  is_private: Boolean
  is_private_not: Boolean
  AND: [ChatScalarWhereInput!]
  OR: [ChatScalarWhereInput!]
  NOT: [ChatScalarWhereInput!]
}

type ChatSubscriptionPayload {
  mutation: MutationType!
  node: Chat
  updatedFields: [String!]
  previousValues: ChatPreviousValues
}

input ChatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChatWhereInput
  AND: [ChatSubscriptionWhereInput!]
  OR: [ChatSubscriptionWhereInput!]
  NOT: [ChatSubscriptionWhereInput!]
}

input ChatUpdateInput {
  chat_name: String
  is_private: Boolean
  messages: MessageUpdateManyWithoutChat_idInput
  users: UserUpdateManyWithoutChatsInput
}

input ChatUpdateManyDataInput {
  chat_name: String
  is_private: Boolean
}

input ChatUpdateManyMutationInput {
  chat_name: String
  is_private: Boolean
}

input ChatUpdateManyWithoutUsersInput {
  create: [ChatCreateWithoutUsersInput!]
  delete: [ChatWhereUniqueInput!]
  connect: [ChatWhereUniqueInput!]
  set: [ChatWhereUniqueInput!]
  disconnect: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [ChatUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [ChatScalarWhereInput!]
  updateMany: [ChatUpdateManyWithWhereNestedInput!]
}

input ChatUpdateManyWithWhereNestedInput {
  where: ChatScalarWhereInput!
  data: ChatUpdateManyDataInput!
}

input ChatUpdateOneRequiredWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput
  update: ChatUpdateWithoutMessagesDataInput
  upsert: ChatUpsertWithoutMessagesInput
  connect: ChatWhereUniqueInput
}

input ChatUpdateWithoutMessagesDataInput {
  chat_name: String
  is_private: Boolean
  users: UserUpdateManyWithoutChatsInput
}

input ChatUpdateWithoutUsersDataInput {
  chat_name: String
  is_private: Boolean
  messages: MessageUpdateManyWithoutChat_idInput
}

input ChatUpdateWithWhereUniqueWithoutUsersInput {
  where: ChatWhereUniqueInput!
  data: ChatUpdateWithoutUsersDataInput!
}

input ChatUpsertWithoutMessagesInput {
  update: ChatUpdateWithoutMessagesDataInput!
  create: ChatCreateWithoutMessagesInput!
}

input ChatUpsertWithWhereUniqueWithoutUsersInput {
  where: ChatWhereUniqueInput!
  update: ChatUpdateWithoutUsersDataInput!
  create: ChatCreateWithoutUsersInput!
}

input ChatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  chat_name: String
  chat_name_not: String
  chat_name_in: [String!]
  chat_name_not_in: [String!]
  chat_name_lt: String
  chat_name_lte: String
  chat_name_gt: String
  chat_name_gte: String
  chat_name_contains: String
  chat_name_not_contains: String
  chat_name_starts_with: String
  chat_name_not_starts_with: String
  chat_name_ends_with: String
  chat_name_not_ends_with: String
  is_private: Boolean
  is_private_not: Boolean
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
}

input ChatWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Message {
  id: ID!
  chat_id: Chat!
  user: User!
  message: String!
  viewed(where: ViewedWhereInput, orderBy: ViewedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Viewed!]
  created_at: DateTime
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  chat_id: ChatCreateOneWithoutMessagesInput!
  user: UserCreateOneInput!
  message: String!
  viewed: ViewedCreateManyWithoutMessageInput
}

input MessageCreateManyWithoutChat_idInput {
  create: [MessageCreateWithoutChat_idInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateOneWithoutViewedInput {
  create: MessageCreateWithoutViewedInput
  connect: MessageWhereUniqueInput
}

input MessageCreateWithoutChat_idInput {
  id: ID
  user: UserCreateOneInput!
  message: String!
  viewed: ViewedCreateManyWithoutMessageInput
}

input MessageCreateWithoutViewedInput {
  id: ID
  chat_id: ChatCreateOneWithoutMessagesInput!
  user: UserCreateOneInput!
  message: String!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  created_at_ASC
  created_at_DESC
}

type MessagePreviousValues {
  id: ID!
  message: String!
  created_at: DateTime
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  chat_id: ChatUpdateOneRequiredWithoutMessagesInput
  user: UserUpdateOneRequiredInput
  message: String
  viewed: ViewedUpdateManyWithoutMessageInput
}

input MessageUpdateManyDataInput {
  message: String
}

input MessageUpdateManyMutationInput {
  message: String
}

input MessageUpdateManyWithoutChat_idInput {
  create: [MessageCreateWithoutChat_idInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutChat_idInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutChat_idInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateOneRequiredWithoutViewedInput {
  create: MessageCreateWithoutViewedInput
  update: MessageUpdateWithoutViewedDataInput
  upsert: MessageUpsertWithoutViewedInput
  connect: MessageWhereUniqueInput
}

input MessageUpdateWithoutChat_idDataInput {
  user: UserUpdateOneRequiredInput
  message: String
  viewed: ViewedUpdateManyWithoutMessageInput
}

input MessageUpdateWithoutViewedDataInput {
  chat_id: ChatUpdateOneRequiredWithoutMessagesInput
  user: UserUpdateOneRequiredInput
  message: String
}

input MessageUpdateWithWhereUniqueWithoutChat_idInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutChat_idDataInput!
}

input MessageUpsertWithoutViewedInput {
  update: MessageUpdateWithoutViewedDataInput!
  create: MessageCreateWithoutViewedInput!
}

input MessageUpsertWithWhereUniqueWithoutChat_idInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutChat_idDataInput!
  create: MessageCreateWithoutChat_idInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  chat_id: ChatWhereInput
  user: UserWhereInput
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  viewed_every: ViewedWhereInput
  viewed_some: ViewedWhereInput
  viewed_none: ViewedWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createChat(data: ChatCreateInput!): Chat!
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  updateManyChats(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): BatchPayload!
  upsertChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat!
  deleteChat(where: ChatWhereUniqueInput!): Chat
  deleteManyChats(where: ChatWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createViewed(data: ViewedCreateInput!): Viewed!
  updateViewed(data: ViewedUpdateInput!, where: ViewedWhereUniqueInput!): Viewed
  upsertViewed(where: ViewedWhereUniqueInput!, create: ViewedCreateInput!, update: ViewedUpdateInput!): Viewed!
  deleteViewed(where: ViewedWhereUniqueInput!): Viewed
  deleteManyVieweds(where: ViewedWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  chat(where: ChatWhereUniqueInput!): Chat
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat]!
  chatsConnection(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  viewed(where: ViewedWhereUniqueInput!): Viewed
  vieweds(where: ViewedWhereInput, orderBy: ViewedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Viewed]!
  viewedsConnection(where: ViewedWhereInput, orderBy: ViewedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ViewedConnection!
  node(id: ID!): Node
}

type Subscription {
  chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  viewed(where: ViewedSubscriptionWhereInput): ViewedSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  password: String!
  email: String!
  created_at: DateTime!
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String!
  email: String!
  chats: ChatCreateManyWithoutUsersInput
}

input UserCreateManyWithoutChatsInput {
  create: [UserCreateWithoutChatsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChatsInput {
  id: ID
  username: String!
  password: String!
  email: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  created_at_ASC
  created_at_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
  email: String!
  created_at: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  password: String
  email: String
  chats: ChatUpdateManyWithoutUsersInput
}

input UserUpdateInput {
  username: String
  password: String
  email: String
  chats: ChatUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  username: String
  password: String
  email: String
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  email: String
}

input UserUpdateManyWithoutChatsInput {
  create: [UserCreateWithoutChatsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutChatsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutChatsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutChatsDataInput {
  username: String
  password: String
  email: String
}

input UserUpdateWithWhereUniqueWithoutChatsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutChatsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutChatsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutChatsDataInput!
  create: UserCreateWithoutChatsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  chats_every: ChatWhereInput
  chats_some: ChatWhereInput
  chats_none: ChatWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}

type Viewed {
  id: ID!
  user: User!
  viewed_date: DateTime!
  message: Message!
}

type ViewedConnection {
  pageInfo: PageInfo!
  edges: [ViewedEdge]!
  aggregate: AggregateViewed!
}

input ViewedCreateInput {
  id: ID
  user: UserCreateOneInput!
  message: MessageCreateOneWithoutViewedInput!
}

input ViewedCreateManyWithoutMessageInput {
  create: [ViewedCreateWithoutMessageInput!]
  connect: [ViewedWhereUniqueInput!]
}

input ViewedCreateWithoutMessageInput {
  id: ID
  user: UserCreateOneInput!
}

type ViewedEdge {
  node: Viewed!
  cursor: String!
}

enum ViewedOrderByInput {
  id_ASC
  id_DESC
  viewed_date_ASC
  viewed_date_DESC
}

type ViewedPreviousValues {
  id: ID!
  viewed_date: DateTime!
}

input ViewedScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  viewed_date: DateTime
  viewed_date_not: DateTime
  viewed_date_in: [DateTime!]
  viewed_date_not_in: [DateTime!]
  viewed_date_lt: DateTime
  viewed_date_lte: DateTime
  viewed_date_gt: DateTime
  viewed_date_gte: DateTime
  AND: [ViewedScalarWhereInput!]
  OR: [ViewedScalarWhereInput!]
  NOT: [ViewedScalarWhereInput!]
}

type ViewedSubscriptionPayload {
  mutation: MutationType!
  node: Viewed
  updatedFields: [String!]
  previousValues: ViewedPreviousValues
}

input ViewedSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ViewedWhereInput
  AND: [ViewedSubscriptionWhereInput!]
  OR: [ViewedSubscriptionWhereInput!]
  NOT: [ViewedSubscriptionWhereInput!]
}

input ViewedUpdateInput {
  user: UserUpdateOneRequiredInput
  message: MessageUpdateOneRequiredWithoutViewedInput
}

input ViewedUpdateManyWithoutMessageInput {
  create: [ViewedCreateWithoutMessageInput!]
  delete: [ViewedWhereUniqueInput!]
  connect: [ViewedWhereUniqueInput!]
  set: [ViewedWhereUniqueInput!]
  disconnect: [ViewedWhereUniqueInput!]
  update: [ViewedUpdateWithWhereUniqueWithoutMessageInput!]
  upsert: [ViewedUpsertWithWhereUniqueWithoutMessageInput!]
  deleteMany: [ViewedScalarWhereInput!]
}

input ViewedUpdateWithoutMessageDataInput {
  user: UserUpdateOneRequiredInput
}

input ViewedUpdateWithWhereUniqueWithoutMessageInput {
  where: ViewedWhereUniqueInput!
  data: ViewedUpdateWithoutMessageDataInput!
}

input ViewedUpsertWithWhereUniqueWithoutMessageInput {
  where: ViewedWhereUniqueInput!
  update: ViewedUpdateWithoutMessageDataInput!
  create: ViewedCreateWithoutMessageInput!
}

input ViewedWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  viewed_date: DateTime
  viewed_date_not: DateTime
  viewed_date_in: [DateTime!]
  viewed_date_not_in: [DateTime!]
  viewed_date_lt: DateTime
  viewed_date_lte: DateTime
  viewed_date_gt: DateTime
  viewed_date_gte: DateTime
  message: MessageWhereInput
  AND: [ViewedWhereInput!]
  OR: [ViewedWhereInput!]
  NOT: [ViewedWhereInput!]
}

input ViewedWhereUniqueInput {
  id: ID
}
`
      }
    